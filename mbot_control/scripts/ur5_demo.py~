#!/usr/bin/env python

"""
    moveit_ik_demo.py - Version 0.1 2014-01-14
    
    Use inverse kinemtatics to move the end effector to a specified pose
    
    Created for the Pi Robot Project: http://www.pirobot.org
    Copyright (c) 2014 Patrick Goebel.  All rights reserved.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.5
    
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details at:
    
    http://www.gnu.org/licenses/gpl.html
"""

import rospy, sys
import moveit_commander
from moveit_msgs.msg import RobotTrajectory
from trajectory_msgs.msg import JointTrajectoryPoint

import time
from ur_driver.io_interface import *
from copy import deepcopy
from geometry_msgs.msg import PoseStamped, Pose
from tf.transformations import euler_from_quaternion, quaternion_from_euler

class MoveItDemo:
    def __init__(self):
        # Initialize the move_group API
        moveit_commander.roscpp_initialize(sys.argv)
        
        rospy.init_node('ur5_pick_and_place_demo')

        cartesian = rospy.get_param('~cartesian', True)

	# Simulate or not
        simulate = True

	if not simulate:
    		set_states()
	    	print "service-server has been started"

        # Initialize the move group for the right arm
        ur_arm = moveit_commander.MoveGroupCommander('manipulator')
                
        # Get the name of the end-effector link
        end_effector_link = ur_arm.get_end_effector_link()
                        
        # Set the reference frame for pose targets
        reference_frame = 'world'
        
        # Set the right arm reference frame accordingly
        ur_arm.set_pose_reference_frame(reference_frame)
                
        # Allow replanning to increase the odds of a solution
        ur_arm.allow_replanning(True)
        
        # Allow some leeway in position (meters) and orientation (radians)
        ur_arm.set_goal_position_tolerance(0.001)
        ur_arm.set_goal_orientation_tolerance(0.001)
        
        # Start the arm in the "resting" pose stored in the SRDF file
	ur_arm.set_named_target('up')
        ur_arm.go()
        rospy.sleep(1)

	joint_positions = [0, -1.544, 1.998, -2.036, -1.558, 0]
	ur_arm.set_joint_value_target(joint_positions)
	ur_arm.go()
        rospy.sleep(1)

	'''ur_arm.shift_pose_target(1,+0.21,end_effector_link)
	ur_arm.go()
	time.sleep(1)
	ur_arm.shift_pose_target(2,-0.055,end_effector_link)
	ur_arm.go()
	time.sleep(1)

	if not simulate:
		set_digital_out(1, True)
		time.sleep(1)

	ur_arm.shift_pose_target(2,+0.05,end_effector_link)
	ur_arm.go()
	time.sleep(1)

	ur_arm.shift_pose_target(1,-0.28,end_effector_link)
	ur_arm.go()
	time.sleep(1)

	joint_positions = [0.311, -1.1138, 1.51505, -1.938, -1.57, 0]
	ur_arm.set_joint_value_target(joint_positions)
	ur_arm.go()
        rospy.sleep(1)

	ur_arm.shift_pose_target(0,+0.1,end_effector_link)
	ur_arm.go()
	time.sleep(1)

	ur_arm.shift_pose_target(2,-0.3,end_effector_link)
	ur_arm.go()
	time.sleep(1)

	if not simulate:
		set_digital_out(1, False)
		time.sleep(1)

        ur_arm.set_named_target('up')
        ur_arm.go()
        rospy.sleep(1)

	joint_positions = [1.509, -1.544, 1.998, -2.036, -1.558, 0]
	ur_arm.set_joint_value_target(joint_positions)
	ur_arm.go()
        rospy.sleep(1)

	ur_arm.shift_pose_target(2,+0.31,end_effector_link)
	ur_arm.go()
	time.sleep(1)
	ur_arm.shift_pose_target(1,+0.18,end_effector_link)
	ur_arm.go()
	time.sleep(1)
	
	ur_arm.shift_pose_target(2,-0.053,end_effector_link)
	ur_arm.go()
	time.sleep(1)

	if not simulate:
		set_digital_out(1, True)
		time.sleep(1)

	ur_arm.shift_pose_target(2,+0.053,end_effector_link)
	ur_arm.go()
	time.sleep(1)

	ur_arm.shift_pose_target(1,-0.40,end_effector_link)
	ur_arm.go()
	time.sleep(1)

	joint_positions = [0.266, -0.932, 1.0332, -1.5997, -1.5485, 0]
	ur_arm.set_joint_value_target(joint_positions)
	ur_arm.go()
        rospy.sleep(1)

	ur_arm.shift_pose_target(2,-0.33,end_effector_link)
	ur_arm.go()
	time.sleep(1)

	if not simulate:
		set_digital_out(1, False)
		time.sleep(1)

        ur_arm.set_named_target('up')
        ur_arm.go()
        rospy.sleep(1)'''

        # Show pose
	now_pose = ur_arm.get_current_pose(end_effector_link).pose
	show_str = "TCP_pose = (" + str(now_pose.position.x) + "," + str(now_pose.position.y) + "," + str(now_pose.position.z) +")"
	rospy.loginfo(show_str)
	joints = ur_arm.get_current_joint_values()
	show_str = "joint_position = (" + str(joints[0])+ ","+ str(joints[1]) + "," + str(joints[2]) + "," + str(joints[3]) + ","+ str(joints[4]) + "," + str(joints[5]) +")"
	rospy.loginfo(show_str)
        # Shut down MoveIt cleanly
        moveit_commander.roscpp_shutdown()
        
        # Exit MoveIt
        moveit_commander.os._exit(0)

if __name__ == "__main__":
    MoveItDemo()


    
    
